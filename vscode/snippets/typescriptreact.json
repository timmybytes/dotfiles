{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "()=> Fragment Component": {
    "prefix": ["raff"],
    "body": [
      "import React from 'react'\n",
      "const ${1:Name} = (${2:props}) => {",
      "\treturn (",
      "\t\t<${3}>\n\t\t\t${0}",
      "\t\t</>",
      "\t)",
      "}\n",
      "export default ${1:Name};"
    ],
    "description": "React arrow function component with enclosing React.Fragment elements."
  },
  "Twin Functional Component: Styled w/props": {
    "prefix": ["tfc"],
    "body": [
      "import React, { FC } from 'react'\n",
      "import tw, { css, styled } from 'twin.macro'\n",
      "\n",
      "type ${1:Name}Props = {",
      "\t// ${2:Types}",
      "}",
      "",
      "const ${1:Name}: FC<${1:Name}Props> = ({",
      "\t/**",
      "\t*",
      "\t*/",
      "\tchildren,",
      "}) => {",
      "\treturn <Container>${3}{children}</Container>",
      "}",
      "",
      "type ContainerProps = {",
      "\t${4: }",
      "}",
      "const Container = styled.div<{}>(({}) => [])"
    ],
    "description": "A functional Typescript component with Twin"
  },
  "Twin Functional Component: Twin w/o props": {
    "prefix": "fc",
    "description": "React Functional Component template",
    "body": [
      "import React, { FC } from 'react';",
      "import tw, { css, styled } from 'twin.macro';",
      "",
      "type $1Props = {",
      "  //",
      "};",
      "",
      "/**",
      " * $2",
      " */",
      "export const $1: FC<$1Props> = (props) => {",
      "  return (",
      "    <Container>",
      "      Hello!",
      "    </Container>",
      "  );",
      "};",
      "",
      "const Container = tw.div`w-full`;"
    ]
  },
  "Twin Macro Basic Component": {
    "prefix": "twc",
    "description": "Twin Macro Basic Component template",
    "body": [
      "export const ${1:name} = styled.div(({ customCss }: CustomCssProps) => (",
      "[tw`$2`, customCss]));",
      ""
    ]
  }
}
